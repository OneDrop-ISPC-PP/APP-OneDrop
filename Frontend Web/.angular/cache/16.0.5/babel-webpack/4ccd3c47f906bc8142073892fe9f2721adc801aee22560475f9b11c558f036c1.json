{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nexport class AuthService {\n  constructor(http, cookies) {\n    this.http = http;\n    this.cookies = cookies;\n    this.url = 'http://127.0.0.1:8000/api/paciente/servicios/';\n  }\n  //////////////////////////////////////////////////////////////\n  ///////////////////   REGISTRO   /////////////////////////////\n  ///////////////////   REGISTRO   /////////////////////////////\n  //////////////////////////////////////////////////////////////\n  POST(urlPOST, body) {\n    return this.http.post(urlPOST, body, {\n      withCredentials: true\n    });\n  }\n  //////////////////////////////////////////////////////////////\n  /////////// SEGUNDO FORMULARIO DE  REGISTRO   ////////////////\n  /////////// SEGUNDO FORMULARIO DE  REGISTRO   ////////////////\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  ///////////////////   LOGIN   ////////////////////////////////\n  ///////////////////   LOGIN   ////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  /////////////////////// CODIGO EN DUDA  /////////////////////////\n  ///////////////////////  NO SERVIRIA    /////////////////////////\n  /////////////////////// CODIGO EN DUDA  /////////////////////////\n  /////////////////////// CODIGO EN DUDA  /////////////////////////\n  /////////////////////// REGISTRO  /////////////////////////\n  // SE CREA METODO DE LOGUEO Y CONTROL QUE CONSUMIRA EL LOGIN COMPONENT\n  // credenciales trae los datos del form y es de tipo loginInterface.\n  signin(credenciales) {\n    //No tiene sentido, pero tomamos los datos\n    console.log(\"Estos son los datos que de ingresaron en el formulario\");\n    console.log(\"Fijate como hacer la verificacion despues\");\n    console.log(credenciales);\n    // La idea seria que los envie con el metodo POST\n    return this.http.post(\"http://localhost:3000/USUARIOS\", credenciales);\n  }\n  // METODO POST DE FORMULARIO //////////\n  LOGIN_POST(url, cuerpo) {\n    // PASAMOS COMO PARAMTRO EL ENDPOINT (URL) AL CUAL ENVIAMOS LA INFORMACION\n    // Y COMO SEGUNDO EL OBJETO QUE VA A CONTENER LA INFORMACION (BODY)\n    return this.http.post(url, cuerpo);\n  }\n  /////////////////////// LOGIN /////////////////////////\n  // SE CREA METODO DE LOGUEO Y CONTROL QUE CONSUMIRA EL LOGIN COMPONENT\n  login(credenciales) {\n    const {\n      email,\n      pass\n    } = credenciales;\n    const bodyyy = {\n      email: email,\n      password: pass\n    };\n    const url = 'http://127.0.0.1:8000/api/auth/login/';\n    // return this.http.get(\"http://localhost:3000/USUARIOS\")\n    return this.http.post(url, bodyyy);\n  }\n  muestraservicioausuario() {\n    return this.http.get(this.url);\n  }\n  // agregado por david set y get token\n  setToken(token) {\n    this.cookies.set(\"csrftoken\", token);\n  }\n  getToken() {\n    return this.cookies.get(\"csrftoken\");\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthService","constructor","http","cookies","url","POST","urlPOST","body","post","withCredentials","signin","credenciales","console","log","LOGIN_POST","cuerpo","login","email","pass","bodyyy","password","muestraservicioausuario","get","setToken","token","set","getToken","i0","ɵɵinject","i1","HttpClient","i2","CookieService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\mrtdh\\OneDrive\\Escritorio\\Estudio\\01-Tecnicatura\\REPOSITORIO\\a36g36\\Documentacion\\Maqueta 2023\\Front\\src\\app\\servicios\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { loginInterface } from './interfaces/loginInterface';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { CookieService } from 'ngx-cookie-service';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  constructor( private http:HttpClient, private cookies: CookieService ) { }\r\n//////////////////////////////////////////////////////////////\r\n///////////////////   REGISTRO   /////////////////////////////\r\n///////////////////   REGISTRO   /////////////////////////////\r\n//////////////////////////////////////////////////////////////\r\n\r\n  POST(urlPOST:string, body: any){\r\n    return this.http.post(urlPOST,body, {withCredentials: true})\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////\r\n/////////// SEGUNDO FORMULARIO DE  REGISTRO   ////////////////\r\n/////////// SEGUNDO FORMULARIO DE  REGISTRO   ////////////////\r\n//////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////////////\r\n///////////////////   LOGIN   ////////////////////////////////\r\n///////////////////   LOGIN   ////////////////////////////////\r\n//////////////////////////////////////////////////////////////\r\n\r\n  \r\n\r\n\r\n\r\n/////////////////////// CODIGO EN DUDA  /////////////////////////\r\n///////////////////////  NO SERVIRIA    /////////////////////////\r\n/////////////////////// CODIGO EN DUDA  /////////////////////////\r\n/////////////////////// CODIGO EN DUDA  /////////////////////////\r\n\r\n\r\n\r\n/////////////////////// REGISTRO  /////////////////////////\r\n\r\n  // SE CREA METODO DE LOGUEO Y CONTROL QUE CONSUMIRA EL LOGIN COMPONENT\r\n      // credenciales trae los datos del form y es de tipo loginInterface.\r\n      signin(credenciales:any):Observable<any>{\r\n        //No tiene sentido, pero tomamos los datos\r\n        console.log(\"Estos son los datos que de ingresaron en el formulario\")\r\n        console.log(\"Fijate como hacer la verificacion despues\")\r\n        console.log(credenciales)\r\n\r\n\r\n      // La idea seria que los envie con el metodo POST\r\n        return this.http.post(\"http://localhost:3000/USUARIOS\",credenciales)\r\n    }\r\n\r\n\r\n   // METODO POST DE FORMULARIO //////////\r\n\r\n    public LOGIN_POST(url:string,cuerpo: { email: any; pass: any; }){ \r\n      \r\n      // PASAMOS COMO PARAMTRO EL ENDPOINT (URL) AL CUAL ENVIAMOS LA INFORMACION\r\n      // Y COMO SEGUNDO EL OBJETO QUE VA A CONTENER LA INFORMACION (BODY)\r\n      return this.http.post(url,cuerpo);\r\n\r\n    }\r\n\r\n\r\n\r\n/////////////////////// LOGIN /////////////////////////\r\n\r\n// SE CREA METODO DE LOGUEO Y CONTROL QUE CONSUMIRA EL LOGIN COMPONENT\r\nlogin(credenciales:loginInterface):Observable<any>{\r\n\r\n  const {email, pass} = credenciales;\r\n  const bodyyy = {email: email, password : pass}\r\n  const url = 'http://127.0.0.1:8000/api/auth/login/'\r\n  // return this.http.get(\"http://localhost:3000/USUARIOS\")\r\n\r\n  return this.http.post(url,bodyyy)\r\n}\r\n\r\nurl:string='http://127.0.0.1:8000/api/paciente/servicios/';\r\n\r\nmuestraservicioausuario( ){\r\n\r\nreturn this.http.get(this.url)\r\n}\r\n\r\n\r\n// agregado por david set y get token\r\nsetToken(token: string) { // antes era String ...\r\nthis.cookies.set(\"csrftoken\", token);\r\n}\r\ngetToken() {\r\nreturn this.cookies.get(\"csrftoken\");\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n"],"mappings":";;;AASA,OAAM,MAAOA,WAAW;EAEtBC,YAAqBC,IAAe,EAAUC,OAAsB;IAA/C,KAAAD,IAAI,GAAJA,IAAI;IAAqB,KAAAC,OAAO,GAAPA,OAAO;IA8EvD,KAAAC,GAAG,GAAQ,+CAA+C;EA9EiB;EAC3E;EACA;EACA;EACA;EAEEC,IAAIA,CAACC,OAAc,EAAEC,IAAS;IAC5B,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAACF,OAAO,EAACC,IAAI,EAAE;MAACE,eAAe,EAAE;IAAI,CAAC,CAAC;EAChE;EAGA;EACA;EACA;EACA;EAOA;EACA;EACA;EACA;EAMA;EACA;EACA;EACA;EAIA;EAEE;EACI;EACAC,MAAMA,CAACC,YAAgB;IACrB;IACAC,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;IACrED,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;IACxDD,OAAO,CAACC,GAAG,CAACF,YAAY,CAAC;IAG3B;IACE,OAAO,IAAI,CAACT,IAAI,CAACM,IAAI,CAAC,gCAAgC,EAACG,YAAY,CAAC;EACxE;EAGD;EAEQG,UAAUA,CAACV,GAAU,EAACW,MAAkC;IAE7D;IACA;IACA,OAAO,IAAI,CAACb,IAAI,CAACM,IAAI,CAACJ,GAAG,EAACW,MAAM,CAAC;EAEnC;EAIJ;EAEA;EACAC,KAAKA,CAACL,YAA2B;IAE/B,MAAM;MAACM,KAAK;MAAEC;IAAI,CAAC,GAAGP,YAAY;IAClC,MAAMQ,MAAM,GAAG;MAACF,KAAK,EAAEA,KAAK;MAAEG,QAAQ,EAAGF;IAAI,CAAC;IAC9C,MAAMd,GAAG,GAAG,uCAAuC;IACnD;IAEA,OAAO,IAAI,CAACF,IAAI,CAACM,IAAI,CAACJ,GAAG,EAACe,MAAM,CAAC;EACnC;EAIAE,uBAAuBA,CAAA;IAEvB,OAAO,IAAI,CAACnB,IAAI,CAACoB,GAAG,CAAC,IAAI,CAAClB,GAAG,CAAC;EAC9B;EAGA;EACAmB,QAAQA,CAACC,KAAa;IACtB,IAAI,CAACrB,OAAO,CAACsB,GAAG,CAAC,WAAW,EAAED,KAAK,CAAC;EACpC;EACAE,QAAQA,CAAA;IACR,OAAO,IAAI,CAACvB,OAAO,CAACmB,GAAG,CAAC,WAAW,CAAC;EACpC;;AA9FatB,WAAW,C;mBAAXA,WAAW,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,aAAA;AAAA;AAAXhC,WAAW,C;SAAXA,WAAW;EAAAiC,OAAA,EAAXjC,WAAW,CAAAkC,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}