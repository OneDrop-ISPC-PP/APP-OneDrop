qpackage com.pisis.oneDrop.services;

import com.pisis.oneDrop.exceptions.customsExceptions.NotFoundException;
import com.pisis.oneDrop.model.dtos.RegistrosPaginadosReadDtoArray;
import com.pisis.oneDrop.model.dtos.registros.RegistroGlucemiaAddDto;
import com.pisis.oneDrop.model.dtos.registros.RegistroGlucemiaReadDto;
import com.pisis.oneDrop.model.dtos.registros.RegistroGlucemiaUpdateDto;
import com.pisis.oneDrop.model.entities.FichaMedica;
import com.pisis.oneDrop.model.entities.RegistroGlucemia;
import com.pisis.oneDrop.model.mappers.RegistroGlucemiaMapper;
import com.pisis.oneDrop.model.repositories.RegistroGlucemiaRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class RegistroGlucemiaService {
    @Autowired
    RegistroGlucemiaRepository registroGlucemiaRepository;

    @Autowired
    RegistroGlucemiaMapper registroGlucemiaMapper;

    @Autowired
    FichaMedicaService fichaMedicaService;

    // TODO validar datos de ficha medica
    public RegistroGlucemiaReadDto addRegistro (Integer id, RegistroGlucemiaAddDto registroGlucemiaAddDto){
        FichaMedica fichaMedicaDeUsuario = fichaMedicaService.getFichaMedicaById(id);
        // TODO validar datos de ficha medica
        // TODO validar datos de ficha medica
        RegistroGlucemia nuevoReg = registroGlucemiaMapper.toEntity(registroGlucemiaAddDto);
        RegistroGlucemia regGuardado = registroGlucemiaRepository.save(nuevoReg);
        fichaMedicaDeUsuario.getRegistros_glucemia().add(regGuardado);
        fichaMedicaService.fichaMedicaRepository.save(fichaMedicaDeUsuario);
        return registroGlucemiaMapper.toReadDto(regGuardado);
    }


    public RegistrosPaginadosReadDtoArray findAllRegistrosByIdUser(Integer id, Integer page, Integer size , String sortBy ){

        Page<RegistroGlucemia> results;
        Sort sort = Sort.by(sortBy);
        Pageable pageable = PageRequest.of(page, size /* , sort */);

        //todo PEDIENTEEEE
        //todo PEDIENTEEEE
        //todo PEDIENTEEEE


        results = registroGlucemiaRepository.findAllRegistrosByIdUser(id, pageable);
        //todo PEDIENTEEEE
        //todo PEDIENTEEEE
        //todo PEDIENTEEEE

        Page pagedResults = results.map(entity -> registroGlucemiaMapper.toReadDto(entity));
        return RegistrosPaginadosReadDtoArray.builder()
                .registros(pagedResults.getContent())
                .total_results(pagedResults.getTotalElements())
                .results_per_page(size)
                .current_page(page)
                .pages(pagedResults.getTotalPages())
                .sort_by("sortBy")
                .build();
    }

    public RegistroGlucemiaReadDto findById (Integer id){
        return registroGlucemiaMapper.toReadDto(getRegistroById(id));
    }
    public RegistroGlucemia getRegistroById (Integer id){
        Optional<RegistroGlucemia> reg = registroGlucemiaRepository.findById(id);
        if(reg.isEmpty()) throw new NotFoundException("Registro no encontrado por id: "+id);
        return reg.get();
    }

    public RegistroGlucemiaReadDto deleteRegistroById (Integer id){
        RegistroGlucemia regABorrar = getRegistroById(id);
        registroGlucemiaRepository.deleteById(id);
        return registroGlucemiaMapper.toReadDto(regABorrar);
    }

    // todo VALIDAR DATO DE ACTUALIZACION
    public RegistroGlucemiaReadDto editRegistroGlucemia(Integer id, RegistroGlucemiaUpdateDto registroGlucemiaUpdateDto){
        Optional<RegistroGlucemia> registro = registroGlucemiaRepository.findById(id);
        if (registro.isEmpty()){
            throw new NotFoundException("NO SE ENCONTRO REGISTRO CON EL ID "+id);
        }
        RegistroGlucemia regAEditar = registro.get();
        if(registroGlucemiaUpdateDto.getFecha() != null){
            regAEditar.setFecha(registroGlucemiaUpdateDto.getFecha());
        }
        if(registroGlucemiaUpdateDto.getValor() != null){
            regAEditar.setValor(registroGlucemiaUpdateDto.getValor());
        }
        if(registroGlucemiaUpdateDto.getComentario() != null){
            regAEditar.setComentario(registroGlucemiaUpdateDto.getComentario());
        }
        return registroGlucemiaMapper.toReadDto(registroGlucemiaRepository.save(regAEditar));
    }

}
