{"ast":null,"code":"/*\r\nlet headersAuth = {}\r\nconst tokenLoguedUser = window.localStorage.getItem(\"auth_token\")\r\nif(tokenLoguedUser !== null && tokenLoguedUser !== \"null\"){\r\n    headersAuth = { \"Authorization\" : `Bearer ${tokenLoguedUser}` }\r\n}\r\n\r\n*/\nimport { HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nexport class AuthInterceptor {\n  constructor() {}\n  intercept(req, next) {\n    let authReq = req;\n    const tokenLoguedUser = window.localStorage.getItem(\"auth_token\");\n    if (tokenLoguedUser != null) {\n      authReq = authReq.clone({\n        setHeaders: {\n          Authorization: `Bearer ${tokenLoguedUser}`\n        }\n      });\n    }\n    return next.handle(authReq);\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)();\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});\nexport const authInterceptorProviders = [{\n  provide: HTTP_INTERCEPTORS,\n  useClass: AuthInterceptor,\n  multi: true // para muchos interceptores\n}];","map":{"version":3,"names":["HTTP_INTERCEPTORS","AuthInterceptor","constructor","intercept","req","next","authReq","tokenLoguedUser","window","localStorage","getItem","clone","setHeaders","Authorization","handle","factory","ɵfac","authInterceptorProviders","provide","useClass","multi"],"sources":["C:\\Users\\mrtdh\\OneDrive\\Escritorio\\Estudio\\01-Tecnicatura\\REPOSITORIO\\a36g36\\Documentacion\\Maqueta 2023\\Front\\src\\app\\servicios\\interceptors\\auth.interceptor.ts"],"sourcesContent":["\r\n    /*\r\n    let headersAuth = {}\r\n    const tokenLoguedUser = window.localStorage.getItem(\"auth_token\")\r\n    if(tokenLoguedUser !== null && tokenLoguedUser !== \"null\"){\r\n        headersAuth = { \"Authorization\" : `Bearer ${tokenLoguedUser}` }\r\n    }\r\n    \r\n    */\r\n\r\nimport { HTTP_INTERCEPTORS, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\n// import { LoginService } from \"login.service\";\r\nimport { Observable } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor{\r\n\r\n    constructor(/* private loginService:LoginService */){\r\n\r\n    }\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        let authReq = req\r\n        const tokenLoguedUser = window.localStorage.getItem(\"auth_token\")\r\n        if (tokenLoguedUser != null){\r\n            authReq = authReq.clone({\r\n                setHeaders:{\r\n                    Authorization : `Bearer ${tokenLoguedUser}`\r\n                }\r\n            })\r\n        }\r\n        return next.handle(authReq)\r\n    }\r\n\r\n}\r\n\r\nexport const authInterceptorProviders = [\r\n    {\r\n        provide : HTTP_INTERCEPTORS,\r\n        useClass : AuthInterceptor,\r\n        multi : true // para muchos interceptores\r\n    }\r\n]"],"mappings":"AACI;;;;;;;;AASJ,SAASA,iBAAiB,QAA8D,sBAAsB;;AAM9G,OAAM,MAAOC,eAAe;EAExBC,YAAA,GAEA;EAEAC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAC9C,IAAIC,OAAO,GAAGF,GAAG;IACjB,MAAMG,eAAe,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IACjE,IAAIH,eAAe,IAAI,IAAI,EAAC;MACxBD,OAAO,GAAGA,OAAO,CAACK,KAAK,CAAC;QACpBC,UAAU,EAAC;UACPC,aAAa,EAAG,UAAUN,eAAe;;OAEhD,CAAC;;IAEN,OAAOF,IAAI,CAACS,MAAM,CAACR,OAAO,CAAC;EAC/B;;AAjBSL,eAAe,C;mBAAfA,eAAe;AAAA;AAAfA,eAAe,C;SAAfA,eAAe;EAAAc,OAAA,EAAfd,eAAe,CAAAe;AAAA;AAqB5B,OAAO,MAAMC,wBAAwB,GAAG,CACpC;EACIC,OAAO,EAAGlB,iBAAiB;EAC3BmB,QAAQ,EAAGlB,eAAe;EAC1BmB,KAAK,EAAG,IAAI,CAAC;CAChB,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}