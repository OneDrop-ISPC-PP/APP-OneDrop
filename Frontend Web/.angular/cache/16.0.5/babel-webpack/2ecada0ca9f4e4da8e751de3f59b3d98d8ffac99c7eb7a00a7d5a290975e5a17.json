{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FormContactoService {\n  constructor(http) {\n    this.http = http;\n    this.email_string = \"\";\n  }\n  // SE CREA METODO DE LOGUEO Y CONTROL QUE CONSUMIRA EL LOGIN COMPONENT\n  // credenciales trae los datos del form y es de tipo loginInterface.\n  login(credenciales) {\n    console.log(\"el email: \" + credenciales.email);\n    // OBTENEMOS EL ATRIBUTO email DEL OBSERVABLE Y SE LO CONVIERTE EN STRING\n    this.email_string = this.http.get('././assets/data_usuarios.json').pipe(map(usuario => {\n      return usuario.email.toString();\n    })).toString();\n    console.log(\"??\" + this.email_string);\n    if (this.email_string = credenciales.email) {}\n    return this.http.get('././assets/data_usuarios.json');\n  }\n  // METODO POST DE FORMULARIO //////////\n  // METODO POST DE FORMULARIO /////////\n  // METODO POST DE FORMULARIO /////////\n  LOGIN_POST(url, cuerpo) {\n    // PASAMOS COMO PARAMTRO EL ENDPOINT (URL) AL CUAL ENVIAMOS LA INFORMACION\n    // Y COMO SEGUNDO EL OBJETO QUE VA A CONTENER LA INFORMACION (BODY)\n    return this.http.post(url, cuerpo);\n  }\n}\nFormContactoService.ɵfac = function FormContactoService_Factory(t) {\n  return new (t || FormContactoService)(i0.ɵɵinject(i1.HttpClient));\n};\nFormContactoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FormContactoService,\n  factory: FormContactoService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["map","FormContactoService","constructor","http","email_string","login","credenciales","console","log","email","get","pipe","usuario","toString","LOGIN_POST","url","cuerpo","post","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\mrtdh\\OneDrive\\Escritorio\\Estudio\\01-Tecnicatura\\REPOSITORIO\\a36g36\\Documentacion\\Maqueta 2023\\Front\\src\\app\\servicios\\form-contacto.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, map } from 'rxjs';\r\nimport { userInterface } from './interfaces/userInterface';\r\nimport { loginInterface } from './interfaces/loginInterface';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FormContactoService {\r\n\r\n  constructor( private http:HttpClient ) { }\r\n\r\n\r\n  email_string:string=\"\"\r\n  \r\n\r\n  // SE CREA METODO DE LOGUEO Y CONTROL QUE CONSUMIRA EL LOGIN COMPONENT\r\n      // credenciales trae los datos del form y es de tipo loginInterface.\r\n  login(credenciales:loginInterface):Observable<userInterface>{\r\n\r\n    console.log(\"el email: \"+ credenciales.email);\r\n\r\n    // OBTENEMOS EL ATRIBUTO email DEL OBSERVABLE Y SE LO CONVIERTE EN STRING\r\n    this.email_string = this.http.get<userInterface>('././assets/data_usuarios.json').pipe(\r\n      map((usuario: userInterface) =>{\r\n        return usuario.email.toString();\r\n      })).toString()\r\n\r\n      console.log(\"??\"+this.email_string)\r\n      \r\n      if(this.email_string=credenciales.email){\r\n      }\r\n      return  this.http.get<userInterface>('././assets/data_usuarios.json')\r\n  }\r\n\r\n\r\n   // METODO POST DE FORMULARIO //////////\r\n   // METODO POST DE FORMULARIO /////////\r\n   // METODO POST DE FORMULARIO /////////\r\n    public LOGIN_POST(url:string,cuerpo: { email: any; pass: any; }){ \r\n      \r\n      // PASAMOS COMO PARAMTRO EL ENDPOINT (URL) AL CUAL ENVIAMOS LA INFORMACION\r\n      // Y COMO SEGUNDO EL OBJETO QUE VA A CONTENER LA INFORMACION (BODY)\r\n      return this.http.post(url,cuerpo);\r\n\r\n    }\r\n  // CIERRA EXPORT\r\n  }\r\n\r\n"],"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;AAMtC,OAAM,MAAOC,mBAAmB;EAE9BC,YAAqBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IAGzB,KAAAC,YAAY,GAAQ,EAAE;EAHmB;EAMzC;EACI;EACJC,KAAKA,CAACC,YAA2B;IAE/BC,OAAO,CAACC,GAAG,CAAC,YAAY,GAAEF,YAAY,CAACG,KAAK,CAAC;IAE7C;IACA,IAAI,CAACL,YAAY,GAAG,IAAI,CAACD,IAAI,CAACO,GAAG,CAAgB,+BAA+B,CAAC,CAACC,IAAI,CACpFX,GAAG,CAAEY,OAAsB,IAAI;MAC7B,OAAOA,OAAO,CAACH,KAAK,CAACI,QAAQ,EAAE;IACjC,CAAC,CAAC,CAAC,CAACA,QAAQ,EAAE;IAEdN,OAAO,CAACC,GAAG,CAAC,IAAI,GAAC,IAAI,CAACJ,YAAY,CAAC;IAEnC,IAAG,IAAI,CAACA,YAAY,GAACE,YAAY,CAACG,KAAK,EAAC,C;IAExC,OAAQ,IAAI,CAACN,IAAI,CAACO,GAAG,CAAgB,+BAA+B,CAAC;EACzE;EAGC;EACA;EACA;EACQI,UAAUA,CAACC,GAAU,EAACC,MAAkC;IAE7D;IACA;IACA,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAACF,GAAG,EAACC,MAAM,CAAC;EAEnC;;AArCSf,mBAAmB,C;mBAAnBA,mBAAmB,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAnBpB,mBAAmB,C;SAAnBA,mBAAmB;EAAAqB,OAAA,EAAnBrB,mBAAmB,CAAAsB,IAAA;EAAAC,UAAA,EAFlB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}